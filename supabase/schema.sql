
--
-- Categories Table
--
CREATE TABLE public.categories (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    name text NOT NULL
);

ALTER TABLE public.categories OWNER TO postgres;
ALTER TABLE ONLY public.categories ADD CONSTRAINT categories_pkey PRIMARY KEY (id);

--
-- Products Table
--
CREATE TABLE public.products (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    name text NOT NULL,
    price numeric NOT NULL,
    stock integer NOT NULL,
    category_id uuid,
    image_url text
);

ALTER TABLE public.products OWNER TO postgres;
ALTER TABLE ONLY public.products ADD CONSTRAINT products_pkey PRIMARY KEY (id);
ALTER TABLE ONLY public.products ADD CONSTRAINT products_category_id_fkey FOREIGN KEY (category_id) REFERENCES public.categories(id);

--
-- Customers Table
--
CREATE TABLE public.customers (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    name text NOT NULL,
    email text NOT NULL,
    phone text
);

ALTER TABLE public.customers OWNER TO postgres;
ALTER TABLE ONLY public.customers ADD CONSTRAINT customers_pkey PRIMARY KEY (id);

--
-- Users Table
--
CREATE TABLE public.users (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    name text NOT NULL,
    email text NOT NULL,
    role text NOT NULL,
    pin text,
    avatar_url text,
    permissions jsonb
);

ALTER TABLE public.users OWNER TO postgres;
ALTER TABLE ONLY public.users ADD CONSTRAINT users_pkey PRIMARY KEY (id);

--
-- Sales Table
--
CREATE TABLE public.sales (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    items jsonb NOT NULL,
    total numeric NOT NULL,
    payment_methods jsonb NOT NULL,
    status text NOT NULL,
    customer_id uuid,
    employee_id uuid,
    order_number integer GENERATED BY DEFAULT AS IDENTITY
);

ALTER TABLE public.sales OWNER TO postgres;
ALTER TABLE ONLY public.sales ADD CONSTRAINT sales_pkey PRIMARY KEY (id);
ALTER TABLE ONLY public.sales ADD CONSTRAINT sales_customer_id_fkey FOREIGN KEY (customer_id) REFERENCES public.customers(id);
ALTER TABLE ONLY public.sales ADD CONSTRAINT sales_employee_id_fkey FOREIGN KEY (employee_id) REFERENCES public.users(id);

--
-- Debts Table
--
CREATE TABLE public.debts (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    sale_id uuid,
    customer_id uuid,
    amount numeric NOT NULL,
    status text NOT NULL
);

ALTER TABLE public.debts OWNER TO postgres;
ALTER TABLE ONLY public.debts ADD CONSTRAINT debts_pkey PRIMARY KEY (id);
ALTER TABLE ONLY public.debts ADD CONSTRAINT debts_customer_id_fkey FOREIGN KEY (customer_id) REFERENCES public.customers(id);
ALTER TABLE ONLY public.debts ADD CONSTRAINT debts_sale_id_fkey FOREIGN KEY (sale_id) REFERENCES public.sales(id);

--
-- Reservations Table
--
CREATE TABLE public.reservations (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    guest_name text NOT NULL,
    check_in timestamp with time zone NOT NULL,
    check_out timestamp with time zone NOT NULL,
    status text NOT NULL,
    product_id uuid
);

ALTER TABLE public.reservations OWNER TO postgres;
ALTER TABLE ONLY public.reservations ADD CONSTRAINT reservations_pkey PRIMARY KEY (id);
ALTER TABLE ONLY public.reservations ADD CONSTRAINT reservations_product_id_fkey FOREIGN KEY (product_id) REFERENCES public.products(id);

--
-- Open Tickets Table
--
CREATE TABLE public.open_tickets (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    employee_id uuid REFERENCES public.users(id),
    customer_id uuid REFERENCES public.customers(id),
    items jsonb NOT NULL,
    total numeric NOT NULL,
    notes text,
    ticket_name text
);
ALTER TABLE public.open_tickets OWNER TO postgres;
ALTER TABLE ONLY public.open_tickets ADD CONSTRAINT open_tickets_pkey PRIMARY KEY (id);

--
-- Enable Row Level Security
--
ALTER TABLE public.categories ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.products ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.customers ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.users ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.sales ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.debts ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.reservations ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.open_tickets ENABLE ROW LEVEL SECURITY;

--
-- Policies for Public Access
--
CREATE POLICY "Allow public read-only access" ON public.categories FOR SELECT USING (true);
CREATE POLICY "Allow public read-only access" ON public.products FOR SELECT USING (true);
CREATE POLICY "Allow public read-only access" ON public.customers FOR SELECT USING (true);
CREATE POLICY "Allow public read-only access" ON public.users FOR SELECT USING (true);
CREATE POLICY "Allow public read-only access" ON public.sales FOR SELECT USING (true);
CREATE POLICY "Allow public read-only access" ON public.debts FOR SELECT USING (true);
CREATE POLICY "Allow public read-only access" ON public.reservations FOR SELECT USING (true);
CREATE POLICY "Allow public read-only access" ON public.open_tickets FOR SELECT USING (true);

--
-- Policies for Full Access (assuming anon key can perform all actions for this example)
--
CREATE POLICY "Allow full access" ON public.categories FOR ALL USING (true) WITH CHECK (true);
CREATE POLICY "Allow full access" ON public.products FOR ALL USING (true) WITH CHECK (true);
CREATE POLICY "Allow full access" ON public.customers FOR ALL USING (true) WITH CHECK (true);
CREATE POLICY "Allow full access" ON public.users FOR ALL USING (true) WITH CHECK (true);
CREATE POLICY "Allow full access" ON public.sales FOR ALL USING (true) WITH CHECK (true);
CREATE POLICY "Allow full access" ON public.debts FOR ALL USING (true) WITH CHECK (true);
CREATE POLICY "Allow full access" ON public.reservations FOR ALL USING (true) WITH CHECK (true);
CREATE POLICY "Allow full access" ON public.open_tickets FOR ALL USING (true) WITH CHECK (true);

--
-- Seed Data (Optional)
--
-- Example Category
INSERT INTO public.categories (name) VALUES ('Food'), ('Beverages'), ('Room');
-- Example Users
INSERT INTO public.users (name, email, role, pin) VALUES 
('Admin', 'admin@orderflow.com', 'Owner', '1234'),
('John Doe', 'john.doe@cashier.com', 'Cashier', '5678');
